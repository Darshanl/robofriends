{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/scroll.js","Containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","Components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","onSearchChange","filterRobots","filter","robo","toLowerCase","includes","Components_SearchBox","Components_scroll","Components_CardList","Component","connect","state","searchRobots","requestRobot","isPending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d163b50.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt=\"Robots\" src={`https://robohash.org/${id}?200x200`}></img>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n           {\r\n            robots.map((user,i) => {\r\n               return (\r\n                <Card key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} />\r\n               );\r\n            })\r\n           } \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField , searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input type='search'\r\n            className=\"pa2 ba bg--green bg-lightest-blue\"\r\n            placeholder='Search Robots'\r\n            onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'480px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { setSearchField,requestRobots } from '../action';\r\n\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/scroll';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobot.robots,\r\n        isPending: state.requestRobot.isPending,\r\n        error:state.requestRobot.error\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())  \r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField , onSearchChange, robots } = this.props;\r\n        const filterRobots = robots.filter(robo => {\r\n            return robo.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"f2\">RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots = {filterRobots} />\r\n                </Scroll> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import \r\n    { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))       \r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \r\n{ CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch ,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload})\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots:[],\r\n    isPending:false,\r\n    error:''\r\n}\r\n\r\nexport const requestRobot = (state = initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state , {isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobot } from './reducer';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobot});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}